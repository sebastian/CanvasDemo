{"version":3,"sources":["app.js"],"names":["Box","x","y","sideLength","isBeingDragged","dragPreviousLocation","isInsideBox","bind","startDragging","render","updateLocation","stopDragging","location","diffX","diffY","ctx","fillStyle","colourByMode","beginPath","rect","closePath","fill","CanvasOrchestrator","mouseDown","mouseMove","mouseUp","setCanvasLocation","canvas","document","getElementById","onmousedown","onmousemove","onmouseup","getContext","window","onresize","draggedBoxes","boxes","windowWidth","innerWidth","windowHeight","innerHeight","canvasStartX","width","canvasStartY","height","e","translateToLocationInCanvas","clientX","clientY","eventLocationToCanvasLocation","forEach","box","push","clearRect"],"mappings":"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","file":"app.a4f658a4.js","sourceRoot":"..","sourcesContent":["class Box {\n  constructor (x, y, sideLength) {\n    this.x = x\n    this.y = y\n    this.sideLength = sideLength\n\n    this.isBeingDragged = false\n    this.dragPreviousLocation = null\n\n    this.isInsideBox = this.isInsideBox.bind(this)\n    this.startDragging = this.startDragging.bind(this)\n    this.render = this.render.bind(this)\n    this.updateLocation = this.updateLocation.bind(this)\n    this.stopDragging = this.stopDragging.bind(this)\n  }\n\n  isInsideBox (x, y) {\n    return (\n      this.x <= x &&\n      this.y <= y &&\n      this.x + this.sideLength >= x &&\n      this.y + this.sideLength >= y\n    )\n  }\n\n  startDragging (location) {\n    this.isBeingDragged = true\n    this.dragPreviousLocation = location\n  }\n\n  stopDragging () {\n    this.isBeingDragged = false\n  }\n\n  updateLocation (location) {\n    const diffX = location.x - this.dragPreviousLocation.x\n    const diffY = location.y - this.dragPreviousLocation.y\n    this.x += diffX\n    this.y += diffY\n    this.dragPreviousLocation = location\n  }\n\n  colourByMode () {\n    if (this.isBeingDragged) {\n      return '#DDD'\n    } else {\n      return '#000'\n    }\n  }\n\n  render (ctx) {\n    ctx.fillStyle = this.colourByMode()\n    ctx.beginPath()\n    ctx.rect(this.x, this.y, this.sideLength, this.sideLength)\n    ctx.closePath()\n    ctx.fill()\n  }\n}\n\nclass CanvasOrchestrator {\n  constructor () {\n    this.mouseDown = this.mouseDown.bind(this)\n    this.mouseMove = this.mouseMove.bind(this)\n    this.mouseUp = this.mouseUp.bind(this)\n    this.setCanvasLocation = this.setCanvasLocation.bind(this)\n    this.render = this.render.bind(this)\n\n    const canvas = document.getElementById('canvas')\n    canvas.onmousedown = this.mouseDown\n    canvas.onmousemove = this.mouseMove\n    canvas.onmouseup = this.mouseUp\n    this.canvas = canvas\n    this.ctx = canvas.getContext('2d')\n\n    // Capture window size so we can calculate where in the canvas we are.\n    this.setCanvasLocation()\n    window.onresize = this.setCanvasLocation\n\n    this.draggedBoxes = []\n    this.boxes = [\n      new Box(10, 30, 20),\n      new Box(50, 80, 20),\n      new Box(100, 80, 80),\n      new Box(200, 40, 50)\n    ]\n\n    this.render()\n  }\n\n  setCanvasLocation () {\n    const windowWidth = window.innerWidth\n    const windowHeight = window.innerHeight\n    this.canvasStartX = (windowWidth - this.canvas.width) / 2\n    this.canvasStartY = (windowHeight - this.canvas.height) / 2\n  }\n\n  translateToLocationInCanvas (x, y) {\n    return {\n      x: x - this.canvasStartX,\n      y: y - this.canvasStartY\n    }\n  }\n\n  eventLocationToCanvasLocation (e) {\n    return this.translateToLocationInCanvas(e.clientX, e.clientY)\n  }\n\n  mouseDown (e) {\n    const location = this.eventLocationToCanvasLocation(e)\n    this.boxes.forEach(box => {\n      if (box.isInsideBox(location.x, location.y)) {\n        box.startDragging(location)\n        this.draggedBoxes.push(box)\n      }\n    })\n    this.render()\n  }\n\n  mouseMove (e) {\n    const location = this.eventLocationToCanvasLocation(e)\n    this.draggedBoxes.forEach(box => box.updateLocation(location))\n    this.render()\n  }\n\n  mouseUp (e) {\n    this.draggedBoxes.forEach(box => box.stopDragging())\n    this.draggedBoxes = []\n    this.render()\n  }\n\n  render () {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.boxes.forEach(box => {\n      box.render(this.ctx)\n    })\n  }\n}\n\nnew CanvasOrchestrator()\n"]}